{"version":3,"sources":["actions/Auth.js","components/Todo/todolist.js","components/Todo/index.js","containers/TodoContainer.js","components/About/index.js","components/App.js","containers/AppContainer.js","reducers/auth.js","reducers/index.js","theme/index.js","firebase/config.js","index.js"],"names":["loginAction","user","type","payload","StyledListItem","styled","ListItem","props","theme","palette","primary","main","StyledButton","Button","Todo","todoList","deleteTodo","changeTodoStatus","updateTodo","Grid","container","spacing","onDragEnd","result","destination","source","_todoList","splice","index","removed","droppableId","provided","snapshot","droppableProps","ref","innerRef","style","opacity","isDraggingOver","map","todo","console","log","key","id","draggableId","draggableProps","dragHandleProps","userSelect","isDragging","item","xs","title","variant","color","onClick","placeholder","StyledSection","section","TodoContainer","div","Loading","TodoPage","useState","input","setInput","setTodoList","finishedList","setFinishedList","isLoading","setIsLoading","isChangedTodo","setIsChangedTodo","isChangedFinishedTodo","setIsChangedFinishedTodo","db","firebase","firestore","useEffect","a","collection","doc","uid","get","resTodo","data","tasks","finishedTodo","update","addTodo","e","preventDefault","uuid","filter","i","deleteFinishTodo","Typography","component","Avatar","alt","displayName","src","photoURL","onSubmit","Input","fullWidth","onChange","target","value","changeInput","find","connect","state","auth","About","FixedWrapper","ListStyled","List","Main","Container","ListItemLink","icon","to","renderLink","React","useMemo","forwardRef","itemProps","button","ListItemText","App","login","refLogin","logout","CircularProgress","Card","CardContent","gutterBottom","CardActions","justifyContent","Drawer","open","aria-label","exact","path","AppContainer","dispatch","provider","GoogleAuthProvider","signInWithRedirect","noUserCallback","onAuthStateChanged","exists","set","signOut","initialState","action","Reducer","combineReducers","createMuiTheme","dark","light","secondary","text","Config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","store","createStore","initializeApp","firebaseConfig","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8066cda7.chunk.js","sourcesContent":["export const LOGIN = 'LOGIN'\nexport const LOGOUT = 'LOGOUT'\n\nexport const loginAction = (user) => {\n  return {\n    type: LOGIN,\n    payload: {\n      user: user\n    }\n  }\n}\n\nexport const logoutAction = () => {\n  return {\n    type: LOGOUT\n  }\n}","import React from 'react'\nimport styled from 'styled-components'\nimport Grid from '@material-ui/core/Grid'\nimport ListItem from '@material-ui/core/ListItem'\nimport Button from '@material-ui/core/Button'\n\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\n\n// テーマを設定しているので[${props => props.theme.palette.primary.main}]こんな感じで呼び出せる\nconst StyledListItem = styled(ListItem)`\n  &:not(:first-child) {\n    border-top: 1px solid ${props => props.theme.palette.primary.main};\n  }\n`\n\nconst StyledButton = styled(Button)`\n  margin: 0 5px;\n`\n\nconst onDragEnd = (result, todoList, updateTodo, type) => {\n  if (!result.destination) return;\n  const { source, destination } = result;\n  const _todoList = [...todoList]\n  const [removed] = _todoList.splice(source.index, 1)\n  _todoList.splice(destination.index, 0, removed)\n  updateTodo(_todoList, type);\n}\n\nconst Todo = ({ todoList, deleteTodo, changeTodoStatus, type , updateTodo}) => {\n  return (\n    <Grid container spacing={3}>\n      <DragDropContext onDragEnd={result => onDragEnd(result, todoList, updateTodo, type)}>\n        <Droppable droppableId={type}>\n          {(provided, snapshot) => {\n            return (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n                style={{\n                  opacity: snapshot.isDraggingOver ? '0.5' : '1'\n                }}\n              >\n                {todoList.map((todo, index) => {\n                  console.log(todo, index)\n                  return (\n                    <Draggable key={todo.id} draggableId={todo.id} index={index}>\n                      {(provided, snapshot) => {\n                        return (\n                          <StyledListItem\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            style={{\n                              userSelect: 'none',\n                              opacity: snapshot.isDragging ? '0.5' : 1,\n                              ...provided.draggableProps.style\n                            }}\n                          >\n                            <Grid item xs={8}>\n                              {todo.title}\n                            </Grid>\n                            <Grid item xs={4}>\n                              <StyledButton variant=\"contained\" color=\"primary\" onClick={() => changeTodoStatus(index)}>{type === 'todo' ? '済み' : '戻す'}</StyledButton>\n                              <StyledButton variant=\"contained\" color=\"secondary\" onClick={() => deleteTodo(index)}>削除</StyledButton>\n                            </Grid>\n                          </StyledListItem>\n                        )\n                      }}\n                    </Draggable>\n                  )\n                })}\n                {provided.placeholder}\n              </div>\n            )\n          }}\n        </Droppable>\n      </DragDropContext>\n    </Grid>\n  )\n}\n\nexport default Todo","import React, { useState, useEffect } from 'react'\nimport Todo from './todolist'\n\nimport uuid from 'uuid/v4'\n\nimport firebase from 'firebase'\nimport 'firebase/firestore'\n\nimport styled from 'styled-components'\nimport {\n  Input,\n  Button,\n  Typography,\n  Grid,\n  Avatar\n} from '@material-ui/core';\n\nconst StyledSection = styled.section`\n  margin: 40px 0;\n`\n\nconst TodoContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 0 auto;\n  > * {\n    width: 48%;\n  }\n`;\n\nconst Loading = styled.div`\n  margin: 40px auto;\n`;\n\n/**\n * タスクページ\n */\nconst TodoPage = (props) => {\n  const user = props.user\n  const [input, setInput] = useState('')\n  const [todoList, setTodoList] = useState([])\n  const [finishedList, setFinishedList] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isChangedTodo, setIsChangedTodo] = useState(false)\n  const [isChangedFinishedTodo, setIsChangedFinishedTodo] = useState(false)\n\n  const db = firebase.firestore()\n\n  // コレクションのデータをステータスに反映\n  useEffect(() => {\n    if (user == null) return\n    (async () => {\n      const resTodo = await db.collection('todolist').doc(user.uid).get()\n      if (resTodo.data().todo.tasks) setTodoList(resTodo.data().todo.tasks)\n      if (resTodo.data().finishedTodo.tasks) setFinishedList(resTodo.data().finishedTodo.tasks)\n      setIsLoading(false)\n    })()\n  }, [db, user])\n\n  // タスクを追加\n  useEffect(() => {\n    if (user == null) return\n    if (isChangedTodo) {\n      (async () => {\n        setIsLoading(true)\n        const docRef = await db.collection('todolist').doc(user.uid)\n        docRef.update({ todo: { tasks: todoList }})\n        setIsLoading(false)\n      })()\n    }\n  }, [todoList, isChangedTodo, db, user])\n\n  // 完了タスクを追加\n  useEffect(() => {\n    if (user == null) return\n    if (isChangedFinishedTodo) {\n      (async () => {\n        setIsLoading(true)\n        const docRef = await db.collection('todolist').doc(user.uid)\n        docRef.update({ finishedTodo: { tasks: finishedList }})\n        setIsLoading(false)\n      })()\n    }\n    setIsChangedFinishedTodo(false)\n  }, [db, finishedList, isChangedFinishedTodo, user])\n\n  const addTodo = async (e) => {\n    e.preventDefault();\n    if (!!input) {\n      setIsChangedTodo(true)\n      setTodoList([...todoList, {\n        title: input,\n        id: uuid(),\n      }])\n      setInput('')\n    }\n  }\n\n  const deleteTodo = (index) => {\n    setIsChangedTodo(true)\n    setTodoList(todoList.filter((todo, i) => i !== index))\n  }\n\n  const deleteFinishTodo = (index) => {\n    setIsChangedFinishedTodo(true)\n    setFinishedList(finishedList.filter((todo, i) => i !== index))\n  }\n\n  const finishTodo = (index) => {\n    setIsChangedTodo(true)\n    setIsChangedFinishedTodo(true)\n    deleteTodo(index)\n    setFinishedList([...finishedList, todoList.find((todo, i) => i === index)])\n  }\n\n  const reopenTodo = (index) => {\n    setIsChangedTodo(true)\n    setIsChangedFinishedTodo(true)\n    deleteFinishTodo(index)\n    setTodoList([...todoList, finishedList.find((todo, i) => i === index)])\n  }\n\n  const updateTodo = (todoList, type) => {\n    setIsChangedTodo(true)\n    setIsChangedFinishedTodo(true)\n    if (type === 'todo') {\n      setTodoList([...todoList])\n    } else if (type === 'done') {\n      setFinishedList([...todoList])\n    }\n  }\n  \n  const changeInput = (e) => {\n    setInput(e.target.value)\n  }\n\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\">TODO!!</Typography>\n      {!user\n        ? <div>loading</div>\n        : (\n          <>\n            <Avatar alt={user.displayName} src={user.photoURL} />\n            <p>{user.displayName}さん</p>\n            <form onSubmit={(e) => addTodo(e)}>\n              <Grid container spacing={3}>\n                <Grid item xs={9}>\n                  <Input fullWidth={true} onChange={(e) => changeInput(e)} value={input}/>\n                </Grid>\n                <Grid item xs={1}>\n                  <Button variant=\"contained\" color=\"primary\" onClick={(e) => addTodo(e)} type=\"submit\">追加</Button>\n                </Grid>\n              </Grid>\n            </form>\n            {isLoading ? (\n              <Loading>loading</Loading>\n            ) : (\n              <TodoContainer>\n                <StyledSection>\n                  <Typography variant=\"h3\" component=\"h2\">TASK</Typography>\n                  <Todo todoList={todoList} deleteTodo={deleteTodo} changeTodoStatus={finishTodo} type=\"todo\" updateTodo={updateTodo}/>\n                </StyledSection>\n                <StyledSection>\n                  <Typography variant=\"h3\" component=\"h2\">COMPLETE</Typography>\n                  <Todo todoList={finishedList} deleteTodo={deleteFinishTodo} changeTodoStatus={reopenTodo} type=\"done\" updateTodo={updateTodo}/>\n                </StyledSection>\n              </TodoContainer>\n            )}\n          </>\n        )}\n    </>\n  )\n}\n\nexport default TodoPage","import { connect } from 'react-redux'\nimport Todo from '../components/Todo/'\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.auth.user\n  }\n}\n\nconst TodoContainer = connect(\n  mapStateToProps,\n)(Todo)\n\nexport default TodoContainer","import React from 'react'\n\nimport {\n  Typography\n} from '@material-ui/core';\n\n/**\n * 説明ページ\n */\nconst About = () => {\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\">ABOUT!!</Typography>\n      <p>ここは説明ページです</p>\n    </>\n  )\n}\n\nexport default About","import React, { useState, useEffect } from 'react'\nimport { BrowserRouter, Route, Link as RouterLink } from 'react-router-dom';\nimport Todo from '../containers/TodoContainer'\nimport About from './About/'\n\nimport styled from 'styled-components'\nimport {\n  Button,\n  Container,\n  Typography,\n  CircularProgress,\n  Card,\n  CardContent,\n  CardActions,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText\n} from '@material-ui/core';\n\nconst FixedWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n`\n\nconst ListStyled = styled(List)`\n  width: 260px;\n`\n\nconst Main = styled(Container)`\n  width: calc(100% - 300px) !important;\n  margin-right: 0 !important;\n  margin-left: auto !important;\n`\n\nconst ListItemLink = ({ icon, primary, to, onClick }) => {\n  const renderLink = React.useMemo(\n    () => React.forwardRef((itemProps, ref) => <RouterLink to={to} ref={ref} {...itemProps} />),\n    [to],\n  );\n  return (\n    <ListItem button component={renderLink} onClick={onClick}>\n      <ListItemText primary={primary}/>\n    </ListItem>\n  );\n}\n\n/**\n * アプリケーションのメイン\n */\nconst App = ({ user, login, refLogin, logout }) => {\n  const [isLoading, setIsLoading] = useState(true)\n  \n  // ログイン情報を元にコレクションを取得する。なければ作成する\n  useEffect(() => {\n    refLogin(() => setIsLoading(false))\n  }, [refLogin])\n\n  if (user == null) {\n    // ロード中\n    if (isLoading) {\n      return (\n        <FixedWrapper>\n          <CircularProgress />\n        </FixedWrapper>\n      )\n    }\n    // ユーザー情報がなければログインボタンを表示\n    return (\n      <FixedWrapper>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h3\" component=\"h2\" color=\"textSecondary\" gutterBottom>TODO</Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Googleアカウントでログインしてください。\n            </Typography>\n          </CardContent>\n          <CardActions style={{ justifyContent: \"center\" }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={() => login()}>\n              Gooele Login\n            </Button>\n          </CardActions>\n        </Card>\n      </FixedWrapper>\n    )\n  }\n\n  // ユーザー情報があれば画面を構築\n  return (\n    <BrowserRouter>\n      <Drawer\n        variant=\"permanent\"\n        open\n        >\n        <ListStyled aria-label=\"secondary mailbox folders\">\n          <ListItem button key=\"1\">\n            <ListItemLink to=\"/\" primary=\"TODO\" />\n          </ListItem>\n          <ListItem button key=\"2\">\n            <ListItemLink to=\"/about\" primary=\"ABOUT\" />\n          </ListItem>\n          <ListItem button key=\"3\">\n            <ListItemLink to=\"/\" primary=\"LOGOUT\" onClick={() => logout()} />\n          </ListItem>\n        </ListStyled>\n      </Drawer>\n      <Main>\n        <Route exact path=\"/\">\n          <Todo />\n        </Route>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n      </Main>\n    </BrowserRouter>\n  )\n}\n\nexport default App","import firebase from 'firebase'\nimport 'firebase/firestore'\n\nimport { connect } from 'react-redux'\nimport { loginAction, logoutAction } from '../actions/Auth'\nimport App from '../components/App'\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.auth.user\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login () {\n      const provider = new firebase.auth.GoogleAuthProvider()\n      firebase.auth().signInWithRedirect(provider)\n    },\n\n    refLogin (noUserCallback) {\n      const db = firebase.firestore()\n      firebase.auth().onAuthStateChanged(async user => {\n        console.log(user)\n        if (!user) {\n          noUserCallback()\n          return false;\n        }\n        // 対象のコレクションがなければ作る\n        const collection = await db.collection('todolist').doc(user.uid).get();\n        if (!collection.exists) {\n          db.collection('todolist').doc(user.uid).set({\n            todo: {\n              tasks: []\n            },\n            finishedTodo: {\n              tasks: []\n            },\n          })\n        }\n        dispatch(loginAction(user))\n      })\n    },\n\n    logout () {\n      firebase.auth().signOut()\n      dispatch(logoutAction())\n    }\n  }\n}\n\nconst AppContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n\nexport default AppContainer","/**\n * 認証\n */\nimport { LOGIN, LOGOUT } from '../actions/Auth'\n\nconst initialState = {\n  user: null\n}\n\nconst auth = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        ...state,\n        user: action.payload.user\n      }\n    case LOGOUT:\n      return {\n        ...state,\n        user: null\n      }\n    default:\n      return state\n  }\n}\n\nexport default auth","import { combineReducers } from 'redux'\nimport auth from './auth'\n\nconst Reducer = combineReducers({\n  auth\n})\n\nexport default Reducer","/**\n * Material-uiのテーマを設定\n */\nimport { createMuiTheme } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#add8e6\",\n      dark: \"#82a5b1\",\n      light: \"#cfeff9\"\n    },\n    secondary: {\n      main: \"#fbe1a9\"\n    },\n    text: {\n      primary: \"#444444\",\n      secondary: \"#757575\"\n    }\n  }\n});\n\nexport default theme;","const Config = () => {\n  return {\n    firebase: {\n      apiKey: process.env.REACT_APP_API_KEY,\n      authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n      databaseURL: process.env.REACT_APP_DATABASE_URL,\n      projectId: process.env.REACT_APP_PROJECT_ID,\n      storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n      messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER,\n      appId: process.env.REACT_APP_APP_ID,\n    }\n  }\n}\n\nexport default Config().firebase","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport AppContainer from './containers/AppContainer'\n\n// Redux\nimport { createStore } from 'redux'\nimport Reducer from './reducers'\nimport { Provider } from 'react-redux'\n\n// Material-uiとstyled-componentsのテーマを揃える\nimport { ThemeProvider as MaterialThemeProvider } from \"@material-ui/styles\";\nimport { ThemeProvider as StyledThemeProvider } from \"styled-components\";\nimport theme from \"./theme\";\n\n// Firebaseの設定\nimport firebase from 'firebase'\nimport 'firebase/auth'\nimport firebaseConfig from './firebase/config'\n\nconst store = createStore(Reducer)\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <Provider store={store}>\n    <MaterialThemeProvider theme={theme}>\n      <StyledThemeProvider theme={theme}>\n        <AppContainer />\n      </StyledThemeProvider>\n    </MaterialThemeProvider>\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}