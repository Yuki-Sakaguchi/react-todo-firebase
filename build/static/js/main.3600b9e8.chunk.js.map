{"version":3,"sources":["actions/Auth.js","pages/Todo/index.js","components/App.js","containers/AppContainer.js","reducers/auth.js","reducers/index.js","theme/index.js","firebase/config.js","index.js"],"names":["loginAction","user","type","payload","StyledListItem","styled","ListItem","props","theme","palette","primary","main","StyledButton","Button","Todo","todoList","deleteTodo","changeTodoStatus","Grid","container","spacing","map","todo","index","key","item","xs","variant","color","onClick","FixedWrapper","div","StyledSection","section","TodoContainer","Loading","App","login","refLogin","logout","useState","input","setInput","setTodoList","finishedList","setFinishedList","isLoading","setIsLoading","isChangedTodo","setIsChangedTodo","isChangedFinishedTodo","setIsChangedFinishedTodo","db","firebase","firestore","useEffect","a","collection","doc","uid","get","resTodo","data","tasks","finishedTodo","update","addTodo","e","preventDefault","filter","i","deleteFinishTodo","CircularProgress","Card","CardContent","Typography","component","gutterBottom","CardActions","style","justifyContent","Container","maxWidth","Avatar","alt","displayName","src","photoURL","onSubmit","Input","fullWidth","onChange","target","value","changeInput","find","AppContainer","connect","state","auth","dispatch","provider","GoogleAuthProvider","signInWithRedirect","noUserCallback","onAuthStateChanged","console","log","exists","set","signOut","initialState","action","Reducer","combineReducers","createMuiTheme","dark","light","secondary","text","Config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","store","createStore","initializeApp","firebaseConfig","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3600b9e8.chunk.js","sourcesContent":["export const LOGIN = 'LOGIN'\nexport const LOGOUT = 'LOGOUT'\n\nexport const loginAction = (user) => {\n  return {\n    type: LOGIN,\n    payload: {\n      user: user\n    }\n  }\n}\n\nexport const logoutAction = () => {\n  return {\n    type: LOGOUT\n  }\n}","import React from 'react'\nimport styled from 'styled-components'\nimport Grid from '@material-ui/core/Grid'\nimport ListItem from '@material-ui/core/ListItem'\nimport Button from '@material-ui/core/Button'\n\n// テーマを設定しているので[${props => props.theme.palette.primary.main}]こんな感じで呼び出せる\nconst StyledListItem = styled(ListItem)`\n  &:not(:first-child) {\n    border-top: 1px solid ${props => props.theme.palette.primary.main};\n  }\n`\n\nconst StyledButton = styled(Button)`\n  margin: 0 5px;\n`\n\nconst Todo = ({ todoList, deleteTodo, changeTodoStatus, type }) => {\n  return (\n    <Grid container spacing={3}>\n      {todoList.map((todo, index) => (\n        <StyledListItem key={index}>\n          <Grid item xs={8}>\n            {todo}\n          </Grid>\n          <Grid item xs={4}>\n            <StyledButton variant=\"contained\" color=\"primary\" onClick={() => changeTodoStatus(index)}>{type === 'todo' ? '済み' : '戻す'}</StyledButton>\n            <StyledButton variant=\"contained\" color=\"secondary\" onClick={() => deleteTodo(index)}>削除</StyledButton>\n          </Grid>\n        </StyledListItem>\n      ))}\n    </Grid>\n  )\n}\n\nexport default Todo","import React, { useState, useEffect } from 'react'\nimport Todo from '../pages/Todo'\n\nimport styled from 'styled-components'\nimport { Input, Button, Container, Typography, Grid, Avatar, CircularProgress, Card, CardContent, CardActions } from '@material-ui/core';\n\nimport firebase from 'firebase'\nimport 'firebase/firestore'\n\nconst FixedWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n`\n\nconst StyledSection = styled.section`\n  margin: 40px 0;\n`\n\nconst TodoContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 0 auto;\n  > * {\n    width: 48%;\n  }\n`;\n\nconst Loading = styled.div`\n  margin: 40px auto;\n`;\n\nconst App = ({ user, login, refLogin, logout }) => {\n  const [input, setInput] = useState('')\n  const [todoList, setTodoList] = useState([])\n  const [finishedList, setFinishedList] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isChangedTodo, setIsChangedTodo] = useState(false)\n  const [isChangedFinishedTodo, setIsChangedFinishedTodo] = useState(false)\n\n  const db = firebase.firestore()\n\n  // ログイン情報を元にコレクションを取得する。なければ作成する\n  useEffect(() => {\n    refLogin(() => setIsLoading(false))\n  }, [refLogin])\n\n  // コレクションのデータをステータスに反映\n  useEffect(() => {\n    if (user == null) return\n    (async () => {\n      const resTodo = await db.collection('todolist').doc(user.uid).get()\n      if (resTodo.data().todo.tasks) setTodoList(resTodo.data().todo.tasks)\n      if (resTodo.data().finishedTodo.tasks) setFinishedList(resTodo.data().finishedTodo.tasks)\n      setIsLoading(false)\n    })()\n  }, [db, user])\n\n  // タスクを追加\n  useEffect(() => {\n    if (user == null) return\n    if (isChangedTodo) {\n      (async () => {\n        setIsLoading(true)\n        const docRef = await db.collection('todolist').doc(user.uid)\n        docRef.update({ todo: { tasks: todoList }})\n        setIsLoading(false)\n      })()\n    }\n  }, [todoList, isChangedTodo, db, user])\n\n  // 完了タスクを追加\n  useEffect(() => {\n    if (user == null) return\n    if (isChangedFinishedTodo) {\n      (async () => {\n        setIsLoading(true)\n        const docRef = await db.collection('todolist').doc(user.uid)\n        docRef.update({ finishedTodo: { tasks: finishedList }})\n        setIsLoading(false)\n      })()\n    }\n    setIsChangedFinishedTodo(false)\n  }, [db, finishedList, isChangedFinishedTodo, user])\n\n  const addTodo = async (e) => {\n    e.preventDefault();\n    if (!!input) {\n      setIsChangedTodo(true)\n      setTodoList([...todoList, input])\n      setInput('')\n    }\n  }\n\n  const deleteTodo = (index) => {\n    setIsChangedTodo(true)\n    setTodoList(todoList.filter((todo, i) => i !== index))\n  }\n\n  const deleteFinishTodo = (index) => {\n    setIsChangedFinishedTodo(true)\n    setFinishedList(finishedList.filter((todo, i) => i !== index))\n  }\n\n  const finishTodo = (index) => {\n    setIsChangedTodo(true)\n    setIsChangedFinishedTodo(true)\n    deleteTodo(index)\n    setFinishedList([...finishedList, todoList.find((todo, i) => i === index)])\n  }\n\n  const reopenTodo = (index) => {\n    setIsChangedTodo(true)\n    setIsChangedFinishedTodo(true)\n    deleteFinishTodo(index)\n    setTodoList([...todoList, finishedList.find((todo, i) => i === index)])\n  }\n  \n  const changeInput = (e) => {\n    setInput(e.target.value)\n  }\n\n  if (user == null) {\n    // ロード中\n    if (isLoading) {\n      return (\n        <FixedWrapper>\n          <CircularProgress />\n        </FixedWrapper>\n      )\n    }\n    // ユーザー情報がなければログインボタンを表示\n    return (\n      <FixedWrapper>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h3\" component=\"h2\" color=\"textSecondary\" gutterBottom>TODO</Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Googleアカウントでログインしてください。\n            </Typography>\n          </CardContent>\n          <CardActions style={{ justifyContent: \"center\" }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={() => login()}>\n              Gooele Login\n            </Button>\n          </CardActions>\n        </Card>\n      </FixedWrapper>\n    )\n  }\n\n  // ユーザー情報があれば画面を構築\n  return (\n    <Container maxWidth=\"xl\">\n      <Typography variant=\"h2\" component=\"h1\">TODO!!</Typography>\n      <Avatar alt={user.displayName} src={user.photoURL} />\n      <p>{user.displayName}さん</p>\n      <button onClick={() => logout()}>Logout</button>\n      <form onSubmit={(e) => addTodo(e)}>\n        <Grid container spacing={3}>\n          <Grid item xs={9}>\n            <Input fullWidth={true} onChange={(e) => changeInput(e)} value={input}/>\n          </Grid>\n          <Grid item xs={1}>\n            <Button variant=\"contained\" color=\"primary\" onClick={(e) => addTodo(e)} type=\"submit\">追加</Button>\n          </Grid>\n        </Grid>\n      </form>\n      {isLoading ? (\n        <Loading>loading</Loading>\n      ) : (\n        <TodoContainer>\n          <StyledSection>\n            <Typography variant=\"h3\" component=\"h2\">TASK</Typography>\n            <Todo todoList={todoList} deleteTodo={deleteTodo} changeTodoStatus={finishTodo} type=\"todo\"/>\n          </StyledSection>\n          <StyledSection>\n            <Typography variant=\"h3\" component=\"h2\">COMPLETE</Typography>\n            <Todo todoList={finishedList} deleteTodo={deleteFinishTodo} changeTodoStatus={reopenTodo} type=\"done\"/>\n          </StyledSection>\n        </TodoContainer>\n      )}\n    </Container>\n  )\n}\n\nexport default App","import firebase from 'firebase'\nimport 'firebase/firestore'\n\nimport { connect } from 'react-redux'\nimport { loginAction, logoutAction } from '../actions/Auth'\nimport App from '../components/App'\n\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.auth.user\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login () {\n      const provider = new firebase.auth.GoogleAuthProvider()\n      firebase.auth().signInWithRedirect(provider)\n    },\n\n    refLogin (noUserCallback) {\n      const db = firebase.firestore()\n      firebase.auth().onAuthStateChanged(async user => {\n        console.log(user)\n        if (!user) {\n          noUserCallback()\n          return false;\n        }\n        // 対象のコレクションがなければ作る\n        const collection = await db.collection('todolist').doc(user.uid).get();\n        if (!collection.exists) {\n          db.collection('todolist').doc(user.uid).set({\n            todo: {\n              tasks: []\n            },\n            finishedTodo: {\n              tasks: []\n            },\n          })\n        }\n        dispatch(loginAction(user))\n      })\n    },\n\n    logout () {\n      firebase.auth().signOut()\n      dispatch(logoutAction())\n    }\n  }\n}\n\nconst AppContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n\nexport default AppContainer","import { LOGIN, LOGOUT } from '../actions/Auth'\n\n/**\n * 認証\n */\nconst initialState = {\n  user: null\n}\n\nconst auth = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        ...state,\n        user: action.payload.user\n      }\n    case LOGOUT:\n      return {\n        ...state,\n        user: null\n      }\n    default:\n      return state\n  }\n}\n\nexport default auth","import { combineReducers } from 'redux'\nimport auth from './auth'\n\nconst Reducer = combineReducers({\n  auth\n})\n\nexport default Reducer","/**\n * Material-uiのテーマを設定\n */\nimport { createMuiTheme } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#add8e6\",\n      dark: \"#82a5b1\",\n      light: \"#cfeff9\"\n    },\n    secondary: {\n      main: \"#fbe1a9\"\n    },\n    text: {\n      primary: \"#444444\",\n      secondary: \"#757575\"\n    }\n  }\n});\n\nexport default theme;","const Config = () => {\n  return {\n    firebase: {\n      apiKey: process.env.REACT_APP_API_KEY,\n      authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n      databaseURL: process.env.REACT_APP_DATABASE_URL,\n      projectId: process.env.REACT_APP_PROJECT_ID,\n      storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n      messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER,\n      appId: process.env.REACT_APP_APP_ID,\n    }\n  }\n}\n\nexport default Config().firebase","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport AppContainer from './containers/AppContainer'\n\n// Redux\nimport { createStore } from 'redux'\nimport Reducer from './reducers'\nimport { Provider } from 'react-redux'\n\n// Material-uiとstyled-componentsのテーマを揃える\nimport { ThemeProvider as MaterialThemeProvider } from \"@material-ui/styles\";\nimport { ThemeProvider as StyledThemeProvider } from \"styled-components\";\nimport theme from \"./theme\";\n\n// Firebaseの設定\nimport firebase from 'firebase'\nimport 'firebase/auth'\nimport firebaseConfig from './firebase/config'\nconst store = createStore(Reducer)\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <Provider store={store}>\n    <MaterialThemeProvider theme={theme}>\n      <StyledThemeProvider theme={theme}>\n        <AppContainer />\n      </StyledThemeProvider>\n    </MaterialThemeProvider>\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}