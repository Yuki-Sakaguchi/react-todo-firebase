{"version":3,"sources":["pages/Todo/index.js","App.js","theme/index.js","config.js","index.js"],"names":["StyledListItem","styled","ListItem","props","theme","palette","primary","main","StyledButton","Button","Todo","todoList","deleteTodo","changeTodoStatus","type","Grid","container","spacing","map","todo","index","key","item","xs","variant","color","onClick","StyledSection","section","TodoContainer","div","Loading","App","useState","user","setUser","input","setInput","setTodoList","finishedList","setFinishedList","isLoading","setIsLoading","isChangedTodo","setIsChangedTodo","isChangedFinishedTodo","setIsChangedFinishedTodo","db","firebase","firestore","useEffect","auth","onAuthStateChanged","a","collection","doc","uid","get","exists","set","tasks","finishedTodo","resTodo","data","update","addTodo","e","preventDefault","filter","i","deleteFinishTodo","provider","GoogleAuthProvider","signInWithRedirect","login","Container","maxWidth","Typography","component","Avatar","alt","displayName","src","photoURL","signOut","onSubmit","Input","fullWidth","onChange","target","value","changeInput","find","createMuiTheme","dark","light","secondary","text","Config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","firebaseConfig","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f482abb.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport Grid from '@material-ui/core/Grid'\nimport ListItem from '@material-ui/core/ListItem'\nimport Button from '@material-ui/core/Button'\n\n// テーマを設定しているので[${props => props.theme.palette.primary.main}]こんな感じで呼び出せる\nconst StyledListItem = styled(ListItem)`\n  &:not(:first-child) {\n    border-top: 1px solid ${props => props.theme.palette.primary.main};\n  }\n`\n\nconst StyledButton = styled(Button)`\n  margin: 0 5px;\n`\n\nconst Todo = ({ todoList, deleteTodo, changeTodoStatus, type }) => {\n  return (\n    <Grid container spacing={3}>\n      {todoList.map((todo, index) => (\n        <StyledListItem key={index}>\n          <Grid item xs={8}>\n            {todo}\n          </Grid>\n          <Grid item xs={4}>\n            <StyledButton variant=\"contained\" color=\"primary\" onClick={() => changeTodoStatus(index)}>{type === 'todo' ? '済み' : '戻す'}</StyledButton>\n            <StyledButton variant=\"contained\" color=\"secondary\" onClick={() => deleteTodo(index)}>削除</StyledButton>\n          </Grid>\n        </StyledListItem>\n      ))}\n    </Grid>\n  )\n}\n\nexport default Todo","import React, { useState, useEffect } from 'react'\nimport Todo from './pages/Todo'\nimport styled from 'styled-components'\nimport { Input, Button, Container, Typography, Grid, Avatar } from '@material-ui/core';\nimport firebase from 'firebase'\nimport 'firebase/firestore'\n\nconst StyledSection = styled.section`\n  margin: 40px 0;\n`\n\nconst TodoContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 0 auto;\n  > * {\n    width: 48%;\n  }\n`;\n\nconst Loading = styled.div`\n  margin: 40px auto;\n`;\n\nconst App = () => {\n  const [user, setUser] = useState(null)\n  const [input, setInput] = useState('')\n  const [todoList, setTodoList] = useState([])\n  const [finishedList, setFinishedList] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isChangedTodo, setIsChangedTodo] = useState(false)\n  const [isChangedFinishedTodo, setIsChangedFinishedTodo] = useState(false)\n\n  const db = firebase.firestore()\n\n  useEffect(() => {\n    firebase.auth().onAuthStateChanged(async user => {\n      // 対象のコレクションがなければ作る\n      if (user != null) {\n        const collection = await db.collection('todolist').doc(user.uid).get();\n        if (!collection.exists) {\n          db.collection('todolist').doc(user.uid).set({\n            todo: {\n              tasks: []\n            },\n            finishedTodo: {\n              tasks: []\n            },\n          })\n        }\n      }\n      setUser(user)\n    })\n  }, [db, user])\n\n  useEffect(() => {\n    if (user == null) return\n    (async () => {\n      const resTodo = await db.collection('todolist').doc(user.uid).get()\n      if (resTodo.data().todo.tasks) setTodoList(resTodo.data().todo.tasks)\n      if (resTodo.data().finishedTodo.tasks) setFinishedList(resTodo.data().finishedTodo.tasks)\n      setIsLoading(false)\n    })()\n  }, [db, user])\n\n  useEffect(() => {\n    if (user == null) return\n    if (isChangedTodo) {\n      (async () => {\n        setIsLoading(true)\n        const docRef = await db.collection('todolist').doc(user.uid)\n        docRef.update({ todo: { tasks: todoList }})\n        setIsLoading(false)\n      })()\n    }\n  }, [todoList, isChangedTodo, db, user])\n\n  useEffect(() => {\n    if (user == null) return\n    if (isChangedFinishedTodo) {\n      (async () => {\n        setIsLoading(true)\n        const docRef = await db.collection('todolist').doc(user.uid)\n        docRef.update({ finishedTodo: { tasks: finishedList }})\n        setIsLoading(false)\n      })()\n    }\n    setIsChangedFinishedTodo(false)\n  }, [db, finishedList, isChangedFinishedTodo, user])\n\n  const addTodo = async (e) => {\n    e.preventDefault();\n    if (!!input) {\n      setIsChangedTodo(true)\n      setTodoList([...todoList, input])\n      setInput('')\n    }\n  }\n\n  const deleteTodo = (index) => {\n    setIsChangedTodo(true)\n    setTodoList(todoList.filter((todo, i) => i !== index))\n  }\n\n  const deleteFinishTodo = (index) => {\n    setIsChangedFinishedTodo(true)\n    setFinishedList(finishedList.filter((todo, i) => i !== index))\n  }\n\n  const finishTodo = (index) => {\n    setIsChangedTodo(true)\n    setIsChangedFinishedTodo(true)\n    deleteTodo(index)\n    setFinishedList([...finishedList, todoList.find((todo, i) => i === index)])\n  }\n\n  const reopenTodo = (index) => {\n    setIsChangedTodo(true)\n    setIsChangedFinishedTodo(true)\n    deleteFinishTodo(index)\n    setTodoList([...todoList, finishedList.find((todo, i) => i === index)])\n  }\n  \n  const changeInput = (e) => {\n    setInput(e.target.value)\n  }\n\n  const login = () => {\n    const provider = new firebase.auth.GoogleAuthProvider()\n    firebase.auth().signInWithRedirect(provider)\n  }\n\n  const logout = () => {\n    firebase.auth().signOut()\n  }\n\n  if (user == null) {\n    return <button onClick={() => login()}>Gooele Login</button>\n  }\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Typography variant=\"h2\" component=\"h1\">TODO!!</Typography>\n      <Avatar alt={user.displayName} src={user.photoURL} />\n      <p>{user.displayName}さん</p>\n      <button onClick={() => logout()}>Logout</button>\n      <form onSubmit={(e) => addTodo(e)}>\n        <Grid container spacing={3}>\n          <Grid item xs={9}>\n            <Input fullWidth={true} onChange={(e) => changeInput(e)} value={input}/>\n          </Grid>\n          <Grid item xs={1}>\n            <Button variant=\"contained\" color=\"primary\" onClick={(e) => addTodo(e)} type=\"submit\">追加</Button>\n          </Grid>\n        </Grid>\n      </form>\n      {isLoading ? (\n        <Loading>loading</Loading>\n      ) : (\n        <TodoContainer>\n          <StyledSection>\n            <Typography variant=\"h3\" component=\"h2\">TASK</Typography>\n            <Todo todoList={todoList} deleteTodo={deleteTodo} changeTodoStatus={finishTodo} type=\"todo\"/>\n          </StyledSection>\n          <StyledSection>\n            <Typography variant=\"h3\" component=\"h2\">COMPLETE</Typography>\n            <Todo todoList={finishedList} deleteTodo={deleteFinishTodo} changeTodoStatus={reopenTodo} type=\"done\"/>\n          </StyledSection>\n        </TodoContainer>\n      )}\n    </Container>\n  )\n}\n\nexport default App","/**\n * Material-uiのテーマを設定\n */\nimport { createMuiTheme } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#add8e6\",\n      dark: \"#82a5b1\",\n      light: \"#cfeff9\"\n    },\n    secondary: {\n      main: \"#fbe1a9\"\n    },\n    text: {\n      primary: \"#444444\",\n      secondary: \"#757575\"\n    }\n  }\n});\n\nexport default theme;","const Config = () => {\n  return {\n    firebase: {\n      apiKey: process.env.REACT_APP_API_KEY,\n      authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n      databaseURL: process.env.REACT_APP_DATABASE_URL,\n      projectId: process.env.REACT_APP_PROJECT_ID,\n      storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n      messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER,\n      appId: process.env.REACT_APP_APP_ID,\n    }\n  }\n}\n\nexport default Config().firebase","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\n// Material-uiとstyled-componentsのテーマを揃える\nimport { ThemeProvider as MaterialThemeProvider } from \"@material-ui/styles\";\nimport { ThemeProvider as StyledThemeProvider } from \"styled-components\";\nimport theme from \"./theme\";\n\n// Firebaseの設定\nimport firebase from 'firebase'\nimport 'firebase/auth'\nimport firebaseConfig from './config'\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <MaterialThemeProvider theme={theme}>\n    <StyledThemeProvider theme={theme}>\n      <App />\n    </StyledThemeProvider>\n  </MaterialThemeProvider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}