{"version":3,"sources":["actions/Auth.js","components/Todo/todolist.js","components/Todo/index.js","containers/TodoContainer.js","components/About/index.js","components/App.js","containers/AppContainer.js","reducers/auth.js","reducers/index.js","theme/index.js","firebase/config.js","index.js"],"names":["loginAction","user","type","payload","StyledListItem","styled","ListItem","props","theme","palette","primary","main","StyledButton","Button","Todo","todoList","deleteTodo","changeTodoStatus","Grid","container","spacing","map","todo","index","key","item","xs","variant","color","onClick","StyledSection","section","TodoContainer","div","Loading","TodoPage","useState","input","setInput","setTodoList","finishedList","setFinishedList","isLoading","setIsLoading","isChangedTodo","setIsChangedTodo","isChangedFinishedTodo","setIsChangedFinishedTodo","db","firebase","firestore","useEffect","a","collection","doc","uid","get","resTodo","data","tasks","finishedTodo","update","addTodo","e","preventDefault","filter","i","deleteFinishTodo","Typography","component","Avatar","alt","displayName","src","photoURL","onSubmit","Input","fullWidth","onChange","target","value","changeInput","find","connect","state","auth","About","FixedWrapper","ListStyled","List","Main","Container","ListItemLink","icon","to","renderLink","React","useMemo","forwardRef","itemProps","ref","button","ListItemText","App","login","refLogin","logout","CircularProgress","Card","CardContent","gutterBottom","CardActions","style","justifyContent","Drawer","open","aria-label","exact","path","AppContainer","dispatch","provider","GoogleAuthProvider","signInWithRedirect","noUserCallback","onAuthStateChanged","console","log","exists","set","signOut","initialState","action","Reducer","combineReducers","createMuiTheme","dark","light","secondary","text","Config","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","store","createStore","initializeApp","firebaseConfig","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2dde9faa.chunk.js","sourcesContent":["export const LOGIN = 'LOGIN'\nexport const LOGOUT = 'LOGOUT'\n\nexport const loginAction = (user) => {\n  return {\n    type: LOGIN,\n    payload: {\n      user: user\n    }\n  }\n}\n\nexport const logoutAction = () => {\n  return {\n    type: LOGOUT\n  }\n}","import React from 'react'\nimport styled from 'styled-components'\nimport Grid from '@material-ui/core/Grid'\nimport ListItem from '@material-ui/core/ListItem'\nimport Button from '@material-ui/core/Button'\n\n// テーマを設定しているので[${props => props.theme.palette.primary.main}]こんな感じで呼び出せる\nconst StyledListItem = styled(ListItem)`\n  &:not(:first-child) {\n    border-top: 1px solid ${props => props.theme.palette.primary.main};\n  }\n`\n\nconst StyledButton = styled(Button)`\n  margin: 0 5px;\n`\n\nconst Todo = ({ todoList, deleteTodo, changeTodoStatus, type }) => {\n  return (\n    <Grid container spacing={3}>\n      {todoList.map((todo, index) => (\n        <StyledListItem key={index}>\n          <Grid item xs={8}>\n            {todo}\n          </Grid>\n          <Grid item xs={4}>\n            <StyledButton variant=\"contained\" color=\"primary\" onClick={() => changeTodoStatus(index)}>{type === 'todo' ? '済み' : '戻す'}</StyledButton>\n            <StyledButton variant=\"contained\" color=\"secondary\" onClick={() => deleteTodo(index)}>削除</StyledButton>\n          </Grid>\n        </StyledListItem>\n      ))}\n    </Grid>\n  )\n}\n\nexport default Todo","import React, { useState, useEffect } from 'react'\nimport Todo from './todolist'\n\nimport firebase from 'firebase'\nimport 'firebase/firestore'\n\nimport styled from 'styled-components'\nimport {\n  Input,\n  Button,\n  Typography,\n  Grid,\n  Avatar\n} from '@material-ui/core';\n\nconst StyledSection = styled.section`\n  margin: 40px 0;\n`\n\nconst TodoContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin: 0 auto;\n  > * {\n    width: 48%;\n  }\n`;\n\nconst Loading = styled.div`\n  margin: 40px auto;\n`;\n\n/**\n * タスクページ\n */\nconst TodoPage = (props) => {\n  const user = props.user\n  const [input, setInput] = useState('')\n  const [todoList, setTodoList] = useState([])\n  const [finishedList, setFinishedList] = useState([])\n  const [isLoading, setIsLoading] = useState(true)\n  const [isChangedTodo, setIsChangedTodo] = useState(false)\n  const [isChangedFinishedTodo, setIsChangedFinishedTodo] = useState(false)\n\n  const db = firebase.firestore()\n\n  // コレクションのデータをステータスに反映\n  useEffect(() => {\n    if (user == null) return\n    (async () => {\n      const resTodo = await db.collection('todolist').doc(user.uid).get()\n      if (resTodo.data().todo.tasks) setTodoList(resTodo.data().todo.tasks)\n      if (resTodo.data().finishedTodo.tasks) setFinishedList(resTodo.data().finishedTodo.tasks)\n      setIsLoading(false)\n    })()\n  }, [db, user])\n\n  // タスクを追加\n  useEffect(() => {\n    if (user == null) return\n    if (isChangedTodo) {\n      (async () => {\n        setIsLoading(true)\n        const docRef = await db.collection('todolist').doc(user.uid)\n        docRef.update({ todo: { tasks: todoList }})\n        setIsLoading(false)\n      })()\n    }\n  }, [todoList, isChangedTodo, db, user])\n\n  // 完了タスクを追加\n  useEffect(() => {\n    if (user == null) return\n    if (isChangedFinishedTodo) {\n      (async () => {\n        setIsLoading(true)\n        const docRef = await db.collection('todolist').doc(user.uid)\n        docRef.update({ finishedTodo: { tasks: finishedList }})\n        setIsLoading(false)\n      })()\n    }\n    setIsChangedFinishedTodo(false)\n  }, [db, finishedList, isChangedFinishedTodo, user])\n\n  const addTodo = async (e) => {\n    e.preventDefault();\n    if (!!input) {\n      setIsChangedTodo(true)\n      setTodoList([...todoList, input])\n      setInput('')\n    }\n  }\n\n  const deleteTodo = (index) => {\n    setIsChangedTodo(true)\n    setTodoList(todoList.filter((todo, i) => i !== index))\n  }\n\n  const deleteFinishTodo = (index) => {\n    setIsChangedFinishedTodo(true)\n    setFinishedList(finishedList.filter((todo, i) => i !== index))\n  }\n\n  const finishTodo = (index) => {\n    setIsChangedTodo(true)\n    setIsChangedFinishedTodo(true)\n    deleteTodo(index)\n    setFinishedList([...finishedList, todoList.find((todo, i) => i === index)])\n  }\n\n  const reopenTodo = (index) => {\n    setIsChangedTodo(true)\n    setIsChangedFinishedTodo(true)\n    deleteFinishTodo(index)\n    setTodoList([...todoList, finishedList.find((todo, i) => i === index)])\n  }\n  \n  const changeInput = (e) => {\n    setInput(e.target.value)\n  }\n\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\">TODO!!</Typography>\n      {!user\n        ? <div>loading</div>\n        : (\n          <>\n            <Avatar alt={user.displayName} src={user.photoURL} />\n            <p>{user.displayName}さん</p>\n            <form onSubmit={(e) => addTodo(e)}>\n              <Grid container spacing={3}>\n                <Grid item xs={9}>\n                  <Input fullWidth={true} onChange={(e) => changeInput(e)} value={input}/>\n                </Grid>\n                <Grid item xs={1}>\n                  <Button variant=\"contained\" color=\"primary\" onClick={(e) => addTodo(e)} type=\"submit\">追加</Button>\n                </Grid>\n              </Grid>\n            </form>\n            {isLoading ? (\n              <Loading>loading</Loading>\n            ) : (\n              <TodoContainer>\n                <StyledSection>\n                  <Typography variant=\"h3\" component=\"h2\">TASK</Typography>\n                  <Todo todoList={todoList} deleteTodo={deleteTodo} changeTodoStatus={finishTodo} type=\"todo\"/>\n                </StyledSection>\n                <StyledSection>\n                  <Typography variant=\"h3\" component=\"h2\">COMPLETE</Typography>\n                  <Todo todoList={finishedList} deleteTodo={deleteFinishTodo} changeTodoStatus={reopenTodo} type=\"done\"/>\n                </StyledSection>\n              </TodoContainer>\n            )}\n          </>\n        )}\n    </>\n  )\n}\n\nexport default TodoPage","import { connect } from 'react-redux'\nimport Todo from '../components/Todo/'\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.auth.user\n  }\n}\n\nconst TodoContainer = connect(\n  mapStateToProps,\n)(Todo)\n\nexport default TodoContainer","import React from 'react'\n\nimport {\n  Typography\n} from '@material-ui/core';\n\n/**\n * 説明ページ\n */\nconst About = () => {\n  return (\n    <>\n      <Typography variant=\"h2\" component=\"h1\">ABOUT!!</Typography>\n      <p>ここは説明ページです</p>\n    </>\n  )\n}\n\nexport default About","import React, { useState, useEffect } from 'react'\nimport { BrowserRouter, Route, Link as RouterLink } from 'react-router-dom';\nimport Todo from '../containers/TodoContainer'\nimport About from './About/'\n\nimport styled from 'styled-components'\nimport {\n  Button,\n  Container,\n  Typography,\n  CircularProgress,\n  Card,\n  CardContent,\n  CardActions,\n  Drawer,\n  List,\n  ListItem,\n  ListItemText\n} from '@material-ui/core';\n\nconst FixedWrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: fixed;\n  width: 100%;\n  height: 100%;\n`\n\nconst ListStyled = styled(List)`\n  width: 260px;\n`\n\nconst Main = styled(Container)`\n  width: calc(100% - 300px) !important;\n  margin-right: 0 !important;\n  margin-left: auto !important;\n`\n\nconst ListItemLink = ({ icon, primary, to, onClick }) => {\n  const renderLink = React.useMemo(\n    () => React.forwardRef((itemProps, ref) => <RouterLink to={to} ref={ref} {...itemProps} />),\n    [to],\n  );\n  return (\n    <ListItem button component={renderLink} onClick={onClick}>\n      <ListItemText primary={primary}/>\n    </ListItem>\n  );\n}\n\n/**\n * アプリケーションのメイン\n */\nconst App = ({ user, login, refLogin, logout }) => {\n  const [isLoading, setIsLoading] = useState(true)\n  \n  // ログイン情報を元にコレクションを取得する。なければ作成する\n  useEffect(() => {\n    refLogin(() => setIsLoading(false))\n  }, [refLogin])\n\n  if (user == null) {\n    // ロード中\n    if (isLoading) {\n      return (\n        <FixedWrapper>\n          <CircularProgress />\n        </FixedWrapper>\n      )\n    }\n    // ユーザー情報がなければログインボタンを表示\n    return (\n      <FixedWrapper>\n        <Card>\n          <CardContent>\n            <Typography variant=\"h3\" component=\"h2\" color=\"textSecondary\" gutterBottom>TODO</Typography>\n            <Typography variant=\"body2\" component=\"p\">\n              Googleアカウントでログインしてください。\n            </Typography>\n          </CardContent>\n          <CardActions style={{ justifyContent: \"center\" }}>\n            <Button variant=\"contained\" color=\"primary\" onClick={() => login()}>\n              Gooele Login\n            </Button>\n          </CardActions>\n        </Card>\n      </FixedWrapper>\n    )\n  }\n\n  // ユーザー情報があれば画面を構築\n  return (\n    <BrowserRouter>\n      <Drawer\n        variant=\"permanent\"\n        open\n        >\n        <ListStyled aria-label=\"secondary mailbox folders\">\n          <ListItem button key=\"1\">\n            <ListItemLink to=\"/\" primary=\"TODO\" />\n          </ListItem>\n          <ListItem button key=\"2\">\n            <ListItemLink to=\"/about\" primary=\"ABOUT\" />\n          </ListItem>\n          <ListItem button key=\"3\">\n            <ListItemLink to=\"/\" primary=\"LOGOUT\" onClick={() => logout()} />\n          </ListItem>\n        </ListStyled>\n      </Drawer>\n      <Main>\n        <Route exact path=\"/\">\n          <Todo />\n        </Route>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n      </Main>\n    </BrowserRouter>\n  )\n}\n\nexport default App","import firebase from 'firebase'\nimport 'firebase/firestore'\n\nimport { connect } from 'react-redux'\nimport { loginAction, logoutAction } from '../actions/Auth'\nimport App from '../components/App'\n\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.auth.user\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login () {\n      const provider = new firebase.auth.GoogleAuthProvider()\n      firebase.auth().signInWithRedirect(provider)\n    },\n\n    refLogin (noUserCallback) {\n      const db = firebase.firestore()\n      firebase.auth().onAuthStateChanged(async user => {\n        console.log(user)\n        if (!user) {\n          noUserCallback()\n          return false;\n        }\n        // 対象のコレクションがなければ作る\n        const collection = await db.collection('todolist').doc(user.uid).get();\n        if (!collection.exists) {\n          db.collection('todolist').doc(user.uid).set({\n            todo: {\n              tasks: []\n            },\n            finishedTodo: {\n              tasks: []\n            },\n          })\n        }\n        dispatch(loginAction(user))\n      })\n    },\n\n    logout () {\n      firebase.auth().signOut()\n      dispatch(logoutAction())\n    }\n  }\n}\n\nconst AppContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App)\n\nexport default AppContainer","/**\n * 認証\n */\nimport { LOGIN, LOGOUT } from '../actions/Auth'\n\nconst initialState = {\n  user: null\n}\n\nconst auth = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN:\n      return {\n        ...state,\n        user: action.payload.user\n      }\n    case LOGOUT:\n      return {\n        ...state,\n        user: null\n      }\n    default:\n      return state\n  }\n}\n\nexport default auth","import { combineReducers } from 'redux'\nimport auth from './auth'\n\nconst Reducer = combineReducers({\n  auth\n})\n\nexport default Reducer","/**\n * Material-uiのテーマを設定\n */\nimport { createMuiTheme } from \"@material-ui/core\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#add8e6\",\n      dark: \"#82a5b1\",\n      light: \"#cfeff9\"\n    },\n    secondary: {\n      main: \"#fbe1a9\"\n    },\n    text: {\n      primary: \"#444444\",\n      secondary: \"#757575\"\n    }\n  }\n});\n\nexport default theme;","const Config = () => {\n  return {\n    firebase: {\n      apiKey: process.env.REACT_APP_API_KEY,\n      authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n      databaseURL: process.env.REACT_APP_DATABASE_URL,\n      projectId: process.env.REACT_APP_PROJECT_ID,\n      storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n      messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER,\n      appId: process.env.REACT_APP_APP_ID,\n    }\n  }\n}\n\nexport default Config().firebase","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport AppContainer from './containers/AppContainer'\n\n// Redux\nimport { createStore } from 'redux'\nimport Reducer from './reducers'\nimport { Provider } from 'react-redux'\n\n// Material-uiとstyled-componentsのテーマを揃える\nimport { ThemeProvider as MaterialThemeProvider } from \"@material-ui/styles\";\nimport { ThemeProvider as StyledThemeProvider } from \"styled-components\";\nimport theme from \"./theme\";\n\n// Firebaseの設定\nimport firebase from 'firebase'\nimport 'firebase/auth'\nimport firebaseConfig from './firebase/config'\n\nconst store = createStore(Reducer)\nfirebase.initializeApp(firebaseConfig);\n\nReactDOM.render(\n  <Provider store={store}>\n    <MaterialThemeProvider theme={theme}>\n      <StyledThemeProvider theme={theme}>\n        <AppContainer />\n      </StyledThemeProvider>\n    </MaterialThemeProvider>\n  </Provider>,\n  document.getElementById('root')\n)"],"sourceRoot":""}